// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PWG5.CoffeeMek.ApiService;

#nullable disable

namespace PWG5.CoffeeMek.ApiService.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250612095945_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("coffee_mek")
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:HistoryTableSchema", "coffee_mek")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("AssemblyLineLogSequence");

            modelBuilder.HasSequence("CutterCNCLogSequence");

            modelBuilder.HasSequence("LatheLogSequence");

            modelBuilder.HasSequence("TestLineLogSequence");

            modelBuilder.Entity("PWG5.CoffeeMek.Data.Models.AssemblyLineLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [coffee_mek].[AssemblyLineLogSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<string>("BlockDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMachineBlocked")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastMaintenance")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("LotCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachineStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("MeanStationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("TimestampLocal")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("TimestampUTC")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("AssemblyLineLogs", "coffee_mek");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("PWG5.CoffeeMek.Data.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers", "coffee_mek");
                });

            modelBuilder.Entity("PWG5.CoffeeMek.Data.Models.CutterCNCLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [coffee_mek].[CutterCNCLogSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<string>("BlockDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("CutDepth")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset>("CycleTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsMachineBlocked")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastMaintenance")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("LotCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachineStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("TimestampLocal")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("TimestampUTC")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Vibration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("CutterCNCLogs", "coffee_mek");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("PWG5.CoffeeMek.Data.Models.LatheLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [coffee_mek].[LatheLogSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<string>("BlockDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMachineBlocked")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastMaintenance")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("LotCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachineStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RotationSpeed")
                        .HasColumnType("int");

                    b.Property<double>("SpindleTemperature")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset>("TimestampLocal")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("TimestampUTC")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("LatheLogs", "coffee_mek");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("PWG5.CoffeeMek.Data.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations", "coffee_mek");
                });

            modelBuilder.Entity("PWG5.CoffeeMek.Data.Models.Lot", b =>
                {
                    b.Property<string>("LotCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<long>("ProducedItems")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("ProductionFinished")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ProductionStarted")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("ScheduledStartTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LotCode");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LocationId");

                    b.ToTable("Lots", "coffee_mek");
                });

            modelBuilder.Entity("PWG5.CoffeeMek.Data.Models.TestLineLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [coffee_mek].[TestLineLogSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<string>("BlockDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("BoilerPressure")
                        .HasColumnType("float");

                    b.Property<double>("BoilerTemperature")
                        .HasColumnType("float");

                    b.Property<double>("EnergyConsumption")
                        .HasColumnType("float");

                    b.Property<bool>("IsMachineBlocked")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastMaintenance")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("LotCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("TimestampLocal")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("TimestampUTC")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("TestLineLogs", "coffee_mek");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("PWG5.CoffeeMek.Data.Models.AssemblyLineLog", b =>
                {
                    b.HasOne("PWG5.CoffeeMek.Data.Models.Location", "Location")
                        .WithMany("AssemblyLineLogs")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("PWG5.CoffeeMek.Data.Models.CutterCNCLog", b =>
                {
                    b.HasOne("PWG5.CoffeeMek.Data.Models.Location", "Location")
                        .WithMany("CutterCNCLogs")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("PWG5.CoffeeMek.Data.Models.LatheLog", b =>
                {
                    b.HasOne("PWG5.CoffeeMek.Data.Models.Location", "Location")
                        .WithMany("LatheLogs")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("PWG5.CoffeeMek.Data.Models.Lot", b =>
                {
                    b.HasOne("PWG5.CoffeeMek.Data.Models.Customer", "Customer")
                        .WithMany("Lots")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PWG5.CoffeeMek.Data.Models.Location", "Location")
                        .WithMany("Lots")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("PWG5.CoffeeMek.Data.Models.TestLineLog", b =>
                {
                    b.HasOne("PWG5.CoffeeMek.Data.Models.Location", "Location")
                        .WithMany("TestLineLogs")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("PWG5.CoffeeMek.Data.Models.Customer", b =>
                {
                    b.Navigation("Lots");
                });

            modelBuilder.Entity("PWG5.CoffeeMek.Data.Models.Location", b =>
                {
                    b.Navigation("AssemblyLineLogs");

                    b.Navigation("CutterCNCLogs");

                    b.Navigation("LatheLogs");

                    b.Navigation("Lots");

                    b.Navigation("TestLineLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
